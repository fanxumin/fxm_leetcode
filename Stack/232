232





    private Stack<Integer> s1;
    private Stack<Integer> s2;

    public MyQueue() {
        s1=new Stack<Integer>();
        s2=new Stack<Integer>();
    }

    /** Push element x to the back of queue. */
    public void push(int x) {
        s1.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if (!s2.isEmpty()) return s2.pop();
        else {
            //把s1中所有的元素放进s2
            while (!s1.isEmpty()){
                s2.push(s1.pop());
            }
            return s2.pop();
        }
    }

    /** Get the front element. */
    public int peek() {
        if (!s2.isEmpty()) return s2.peek();
        else {
            while (!s1.isEmpty()){
                s2.push(s1.pop());
            }
            return s2.peek();
        }
    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        return s1.isEmpty()&&s2.isEmpty();
    }


